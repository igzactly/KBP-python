from tkinter import *import mysql.connectorimport threadingimport timeimport osimport randomfrom tkinter import messageboxcon=mysql.connector.connect(user='root',password='sipl',host='127.0.0.1',database='kbp_questions')cursor=con.cursor()cursor.autocommit=True#file=open('user.txt','r')#name=file.read()#file.close()file1=open('score.txt','w')def get_score():        file1=open('score.txt','r')        file2=open('user.txt','r')        name=file2.read()        a=file1.read()        file1.close()                #cursor.execute('alter table users set score='+a+' where name='+'"'+name+'"');def set_score():    file1=open('score.txt','r')    file2=open('user.txt','r')    name=file2.read()    a=file1.read()    file1.close()    con=mysql.connector.connect(user='root',password='sipl',host='127.0.0.1',database='kbp_users')    cursor=con.cursor()    cursor.execute('update users set score='+a+' where name='+'"'+name+'"'+';');    quit()class DB:    def __init__(self):        self.data=''    def get_optns(self,a,b):        cursor.execute('select * from '+str(a)+' where ID = '+str(b)+';')        print('select * from '+str(a)+' where ID = '+str(b)+';')        a=cursor.fetchall()        print(a)        self.data=a[0]    def get_quest(self):        return self.data[1]    def get_opt1(self):        return self.data[2]    def get_opt2(self):        return self.data[3]    def get_opt3(self):        return self.data[4]    def get_opt4(self):        return self.data[5]    def get_correct(self):        return self.data[6]    def get_score(self):        return self.data[7]    class Gameplay:    def validate(self):        correct=self.a.get_correct()        m=self.var1.get()        if self.a.get_opt1()==correct and m==1:            print('YES')        elif self.a.get_opt2()==correct and m==2:            print('YES')        elif self.a.get_opt3()==correct and m==3:            print('YES')        elif self.a.get_opt4()==correct and m==4:            print("YES")        else:            print('NO')                            def __init__(self):        self.right=[]        self.i=2        self.x=0        self.sum=0        self.main=Tk()        self.main.geometry('1360x730')        #self.main.attributes('-alpha',0.88)        self.main.resizable(height=False,width=False)        self.bg=PhotoImage(file='bg2.png')        self.Bg=Label(self.main,image=self.bg)        self.var1=IntVar()        self.var=StringVar()        self.var2=StringVar()                self.l1=Message(self.main,textvariable=self.var,font=("Matura MT Script Capitals",25),background='black',fg='white',width=1000)        #just list of buttons to save code in 50-50 srryyyyyy......        self.r=['a',Button(self.main,command=lambda:self.val(1),font=("Matura MT Script Capitals",15,'bold'),background='black',fg='white'),Button(self.main,command=lambda:self.val(2),font=("Matura MT Script Capitals",15,'bold'),background='black',fg='white'),Button(self.main,command=lambda:self.val(3),font=("Matura MT Script Capitals",15,'bold'),background='black',fg='white'),Button(self.main,command=lambda:self.val(4),font=("Matura MT Script Capitals",15,'bold'),background='black',fg='white')]        self.ftybt=Button(self.main,text="50 - 50",state=NORMAL,command=self.fifty,font=("Matura MT Script Capitals",15,'bold'),background='black',fg='white')        self.ftdestroy=False         self.flipbt=Button(self.main,text="Flip the question",state=NORMAL,command=self.flip_question,font=("Comic Sans MS",15,'bold'),background='black',fg='white')        self.flipdestroy=False        self.Score1=Label(self.main,font=("Comic Sans MS",10))        self.Score2=Label(self.main,text='0',font=("Comic Sans MS",10))        self.Bg.place(x=0,y=0,relwidth=0.9990,relheight=0.9990)        self.l1.place(x=0,y=100)        self.r[1].place(x=50,y=240)        self.r[2].place(x=650,y=240)        self.r[3].place(x=50,y=340)        self.r[4].place(x=650,y=340)        self.ftybt.place(x=700,y=500)        self.flipbt.place(x=100,y=500)        self.Score1.place(x=800,y=20)        self.Score2.place(x=900,y=20)        self.var2.set("Check")                #self.main.geometry('3000x600')        self.table=['a','b','c','d','e']        self.tbl=0        self.s=''        self.a=DB()        self.d=random.randrange(0,4)        #self.Score2.config(text=self.a.get_score())        if self.i==2:            self.Start_Gameplay()            self.i=self.i+1        self.b=Button(self.main,text=self.var2.get(),command=self.mid,font=("Comic Sans MS",20,'bold'),background='black',fg='white')        self.b.place(x=480,y=450)            def mid(self):        print("1")        x=str(self.var2.get())        print(x)        if x=="Next":            self.var2.set("Check")            self.b.destroy()            self.b=Button(self.main,text=self.var2.get(),command=self.mid,font=("Comic Sans MS",20,'bold'),bg='black',fg='white')            self.b.place(x=480,y=450)            self.nextq()        elif x=='Check':            if self.s==self.a.get_correct():                self.color.config(bg="dark green")                self.sum+=int(self.a.get_score())                self.Score2.config(text=self.sum)            else:                self.color.config(bg="red")            self.b.destroy()            self.var2.set("Next")            self.b.destroy()            self.b=Button(self.main,text=self.var2.get(),command=self.mid,font=("Comic Sans MS",20,'bold'),background='black',fg='white')            self.b.place(x=480,y=450)            self.validate()    def val(self,x):        if x==1:            self.r[1].config(bg="yellow",fg="black")            self.s=self.a.get_opt1()            self.color=self.r[1]            self.r[2].config(bg="black",fg="white")            self.r[3].config(bg="black",fg="white")            self.r[4].config(bg="black",fg="white")        elif x==2:            self.r[1].config(bg="black",fg="white")            self.r[2].config(bg="yellow",fg="black")            self.s=self.a.get_opt2()            self.color=self.r[2]            self.r[3].config(bg="black",fg="white")            self.r[4].config(bg="black",fg="white")        elif x==3:            self.r[1].config(bg="black",fg="white")            self.r[2].config(bg="black",fg="white")            self.r[3].config(bg="yellow",fg="black")            self.s=self.a.get_opt3()            self.color=self.r[3]            self.r[4].config(bg="black",fg="white")        else:            self.r[1].config(bg="black",fg="white")            self.r[2].config(bg="black",fg="white")            self.r[3].config(bg="black",fg="white")            self.r[4].config(bg="yellow",fg="black")            self.s=self.a.get_opt4()            self.color=self.r[4]    def nextq(self):        for i in range(4):            self.r[i+1].config(bg="black",state=NORMAL,fg="white")            self.Score1.config(text=self.a.get_score())        self.i=self.i+1        self.Start_Gameplay()        self.Score1.config(text=self.a.get_score())                def Start_Gameplay(self):        d=self.d        self.tbl=d        cursor.execute('select count(*) from '+str(self.table[d])+';')        end=cursor.fetchall()        e=int(end[0][0])        e+=1        print("Count",e)        if (e>10):            get_score()        print("QNum",self.i)        if self.i!=e:            #self.d=random.randrange(0,4)                        print("Table ID :",d)            print("Question number :",self.i)            self.a.get_optns(self.table[d],self.i)            q=self.a.get_quest()            self.var.set(q)            self.r[1].config(text=self.a.get_opt1())            self.r[2].config(text=self.a.get_opt2())            self.r[3].config(text=self.a.get_opt3())            self.r[4].config(text=self.a.get_opt4())            if self.ftdestroy:                pass            else:                self.ftybt.configure(state=NORMAL)            if self.flipdestroy:                pass            else:                self.flipbt.configure(state=NORMAL)                    else:            messagebox.showinfo('Game Over',"Your Score is  : "+str(self.sum))            score=str(self.sum)            file1.write(score)            file1.close()            get_score()            set_score()    def fifty(self):        self.ftybt.configure(state=DISABLED)        if self.flipdestroy:            pass        else:            self.flipbt.configure(state=DISABLED)        x=[self.a.get_opt1(),self.a.get_opt2(),self.a.get_opt3(),self.a.get_opt4()]        cpx=[]        for j in x:            cpx.append(j)        print(x)        print("Correct Ans :",self.a.get_correct())        cpx.remove(self.a.get_correct())        print(cpx)        print(x)        r_index=x.index(self.a.get_correct())        o_index=x.index(cpx[random.randrange(0,3)])        for i in range(4):            self.r[i+1].configure(state=DISABLED)        self.r[r_index+1].configure(state=NORMAL)        self.r[o_index+1].configure(state=NORMAL)        self.ftybt.destroy()        #self.i=self.i+1        self.ftdestroy=True            def flip_question(self):        self.flipbt.configure(state=DISABLED)        if self.ftdestroy:            pass        else:            self.ftybt.configure(state=DISABLED)        d=self.tbl        if d==0:            l=random.sample([1,2,3,4],1)            d=l[0]        elif d==1:            l=random.sample([0,2,3,4],1)            d=l[0]        elif d==2:            l=random.sample([1,0,3,4],1)            d=l[0]        elif d==3:            l=random.sample([1,2,0,4],1)            d=l[0]        elif d==4:            l=random.sample([1,2,3,0],1)            d=l[0]        print(" flip q from table : ",d)        self.a.get_optns(self.table[d],self.i)        print("Question number :",self.i)        q=self.a.get_quest()        self.var.set(q)        self.r[1].config(text=self.a.get_opt1())        self.r[2].config(text=self.a.get_opt2())        self.r[3].config(text=self.a.get_opt3())        self.r[4].config(text=self.a.get_opt4())        self.flipbt.destroy()        #self.i+=1        self.flipdestroy=True        self.Start_Gameplay()                ob=Gameplay()ob.main.mainloop()